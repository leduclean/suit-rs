use minicbor::decode;
use std::fs::File;
use std::io::Read;
use suit_rs::manifest::SuitStart;

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let mut file = File::open("testfiles/suit_manifest_expID.cbor")?;
    let mut buffer = Vec::new();
    // Load hex from draft-ietf below as hex

    let hex3_with_cose = "d86ba2025873825824822f5820f6d44a62ec906b392500c242e78e908e9cc5057f3f04104a06a8566200da2ee0584ad28443a10126a0f658400bbf7058c1a79dff23c7755d36aae5c6cc1aacb818f456e2e03f2664c369b9c6700931a52f1f8d808aa4a8e5220d479c9661d2bce0a44974004325001e3b1abb0359010fa5010102030358a4a2028181410004589b8814a20150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf429b2d51f2ab450f8258348614a10500050514a2035824822f582000112233445566778899aabbccddeeff0123456789abcdeffedcba98765432100e1987d058368614a10501050514a2035824822f58200123456789abcdeffedcba987654321000112233445566778899aabbccddeeff0e1a00012c22010f020f074382030f14585b860f8258288614a10500050514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65312e62696e58288614a10501050514a115781c687474703a2f2f6578616d706c652e636f6d2f66696c65322e62696e1502030f";
    let hex4_with_cose = "d86ba2025873825824822f58205b5f6586b1e6cdf19ee479a5adabf20658\
    1000bd584b0832a9bdaf4f72cdbdd6584ad28443a10126a0f65840c53c28\
    26b042384e95c646cbcd4308b181f1ed2bfbeb4e70b93cac9fbdc82e382d\
    877e2c2bcfaf975ffcd36941f2f4db89f68d3c77d6a3506e9b1509a49dec\
    4603590116a801010204035867a20283814100814102814101045858880c\
    0014a40150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e\
    48bf429b2d51f2ab45035824822f582000112233445566778899aabbccdd\
    eeff0123456789abcdeffedcba98765432100e1987d0010f020f0745840c\
    00030f085838880c0214a3035824822f58200123456789abcdeffedcba98\
    7654321000112233445566778899aabbccddeeff0e1a00012c2216001602\
    030f0945840c02170210584e880c0114a2035824822f5820001122334455\
    66778899aabbccddeeff0123456789abcdeffedcba987654321015781b68\
    7474703a2f2f6578616d706c652e636f6d2f66696c652e62696e1502030f\
    144b880c0014a116011602030f";
    let hex5_with_cose = "d86ba2025873825824822f582015ce60f77657e4531dc329155f8b0ed78f\
    94bdc6d165b2665473693dcc34f470584ad28443a10126a0f6584053505b\
    f2b1aba7f3c3e142d6c02350daf95331a8942e77d7378c6670285638e0fe\
    460fe7cebcbe242b14e7ac1a4482cf500136a2568a92a803f614d5f87ef7\
    a703590101a601010205035895a202828141008141010458898c0c0014a4\
    0150fa6b4a53d5ad5fdfbe9de663e4d41ffe02501492af1425695e48bf42\
    9b2d51f2ab45035824822f582000112233445566778899aabbccddeeff01\
    23456789abcdeffedcba98765432100e1987d0010f020f0c0114a2035824\
    822f58200123456789abcdeffedcba987654321000112233445566778899\
    aabbccddeeff0e1a00012c220749880c00030f0c01030f0945840c001702\
    14584f900c0014a115781c687474703a2f2f6578616d706c652e636f6d2f\
    66696c65312e62696e1502030f0c0114a115781c687474703a2f2f657861\
    6d706c652e636f6d2f66696c65322e62696e1502030f";
    let bytes = hex::decode(hex5_with_cose).expect("invalid hex");
    file.read_to_end(&mut buffer)?;
    let value: SuitStart = decode(&bytes)?;
    println!("struct: {value:?}");
    Ok(())
}
